{"ast":null,"code":"var _jsxFileName = \"/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/Components/InputForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport data from '../assets/crypto_data';\nimport sleep from '../utils/sleep';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  logo: {\n    marginLeft: theme.spacing(15)\n  },\n  body: {\n    padding: theme.spacing(10),\n    paddingLeft: theme.spacing(75),\n    paddingRight: theme.spacing(75)\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: theme.spacing(5),\n    borderRadius: 5,\n    boxShadow: '0px 0px 10px 3px rgba(0, 0, 0, .3)',\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n}));\nconst BootstrapButton = withStyles({\n  root: {\n    color: 'white',\n    boxShadow: 'none',\n    textTransform: 'none',\n    fontSize: 14,\n    padding: '6px 200px',\n    border: '1px solid',\n    lineHeight: 1.5,\n    backgroundColor: '#1652F0',\n    borderColor: '#0063cc',\n    fontFamily: 'Red Hat Display',\n    '&:hover': {\n      backgroundColor: '#0069d9',\n      borderColor: '#0062cc',\n      boxShadow: 'none'\n    },\n    '&:active': {\n      boxShadow: 'none',\n      backgroundColor: '#0062cc',\n      borderColor: '#005cbf'\n    },\n    '&:focus': {\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)'\n    },\n    '&:disabled': {\n      backgroundColor: '#bababa',\n      borderColor: '#bababa'\n    }\n  }\n})(Button);\n\nconst InputForm = ({\n  setData,\n  res_data,\n  setIsLoading\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [selection, setSelection] = useState('');\n\n  const selectCoin = params => {\n    setSelection(params.inputProps.value);\n    return /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      fontFamily: \"Red Hat Display\",\n      label: \"Coin\",\n      variant: \"outlined\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 16\n    }, this);\n  };\n\n  async function getPrediction() {\n    setIsLoading(true);\n    fetch('/process?coinName=' + selection, {\n      method: \"GET\",\n      mode: \"cors\"\n    }).then(res => res.json().then(data => {\n      console.log(data);\n    }).catch(error => {\n      console.error('Error:', error);\n      setIsLoading(false);\n    }));\n    console.log(res_data);\n\n    while (res_data === null) {\n      await sleep(2000);\n      fetch('/predict?coinName=' + selection, {\n        method: \"GET\",\n        mode: \"cors\"\n      }).then(res => res.json().then(data => {\n        if (data.data.misc != undefined) {\n          setData(data.data);\n          setIsLoading(false);\n          console.log(data.data);\n        } else {\n          console.log(data);\n        }\n      }).catch(error => {\n        console.error('Error:', error);\n        setIsLoading(false);\n      }));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n      id: \"combo-box-demo\",\n      options: data,\n      getOptionLabel: option => option.title,\n      style: {\n        width: 300\n      },\n      renderInput: params => selectCoin(params)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: classes.submit,\n      pt: 2,\n      children: /*#__PURE__*/_jsxDEV(BootstrapButton, {\n        disabled: selection === '',\n        onClick: () => getPrediction(),\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InputForm, \"kiA8wjbABun6oDIZTWzvQNplLsA=\", false, function () {\n  return [useStyles];\n});\n\n_c = InputForm;\nexport default InputForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"sources":["/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/Components/InputForm.js"],"names":["React","useState","makeStyles","withStyles","Button","Box","Autocomplete","TextField","data","sleep","useStyles","theme","logo","marginLeft","spacing","body","padding","paddingLeft","paddingRight","form","backgroundColor","borderRadius","boxShadow","display","flex","flexDirection","justifyContent","alignItems","BootstrapButton","root","color","textTransform","fontSize","border","lineHeight","borderColor","fontFamily","InputForm","setData","res_data","setIsLoading","classes","selection","setSelection","selectCoin","params","inputProps","value","getPrediction","fetch","method","mode","then","res","json","console","log","catch","error","misc","undefined","option","title","width","submit"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,EAAqBC,UAArB,QAAuC,0BAAvC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,MAAMC,SAAS,GAAGR,UAAU,CAAES,KAAD,KAAY;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAEF,KAAK,CAACG,OAAN,CAAc,EAAd;AADR,GAD+B;AAIrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAEL,KAAK,CAACG,OAAN,CAAc,EAAd,CADL;AAEJG,IAAAA,WAAW,EAAEN,KAAK,CAACG,OAAN,CAAc,EAAd,CAFT;AAGJI,IAAAA,YAAY,EAAEP,KAAK,CAACG,OAAN,CAAc,EAAd;AAHV,GAJ+B;AASrCK,EAAAA,IAAI,EAAE;AACJC,IAAAA,eAAe,EAAE,OADb;AAEJJ,IAAAA,OAAO,EAAEL,KAAK,CAACG,OAAN,CAAc,CAAd,CAFL;AAGJO,IAAAA,YAAY,EAAE,CAHV;AAIJC,IAAAA,SAAS,EAAE,oCAJP;AAKJC,IAAAA,OAAO,EAAE,MALL;AAMJC,IAAAA,IAAI,EAAE,CANF;AAOJC,IAAAA,aAAa,EAAE,QAPX;AAQJC,IAAAA,cAAc,EAAE,QARZ;AASJC,IAAAA,UAAU,EAAE;AATR;AAT+B,CAAZ,CAAD,CAA5B;AAsBE,MAAMC,eAAe,GAAGzB,UAAU,CAAC;AACjC0B,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,OADH;AAEJR,IAAAA,SAAS,EAAE,MAFP;AAGJS,IAAAA,aAAa,EAAE,MAHX;AAIJC,IAAAA,QAAQ,EAAE,EAJN;AAKJhB,IAAAA,OAAO,EAAE,WALL;AAMJiB,IAAAA,MAAM,EAAE,WANJ;AAOJC,IAAAA,UAAU,EAAE,GAPR;AAQJd,IAAAA,eAAe,EAAE,SARb;AASJe,IAAAA,WAAW,EAAE,SATT;AAUJC,IAAAA,UAAU,EAAE,iBAVR;AAWJ,eAAW;AACThB,MAAAA,eAAe,EAAE,SADR;AAETe,MAAAA,WAAW,EAAE,SAFJ;AAGTb,MAAAA,SAAS,EAAE;AAHF,KAXP;AAgBJ,gBAAY;AACVA,MAAAA,SAAS,EAAE,MADD;AAEVF,MAAAA,eAAe,EAAE,SAFP;AAGVe,MAAAA,WAAW,EAAE;AAHH,KAhBR;AAqBJ,eAAW;AACTb,MAAAA,SAAS,EAAE;AADF,KArBP;AAwBJ,kBAAc;AACZF,MAAAA,eAAe,EAAE,SADL;AAEZe,MAAAA,WAAW,EAAE;AAFD;AAxBV;AAD2B,CAAD,CAAV,CA8BrB/B,MA9BqB,CAAxB;;AAgCF,MAAMiC,SAAS,GAAG,CAAC;AAACC,EAAAA,OAAD;AAAUC,EAAAA,QAAV;AAAoBC,EAAAA;AAApB,CAAD,KAAuC;AAAA;;AACrD,QAAMC,OAAO,GAAG/B,SAAS,EAAzB;AACA,QAAM,CAACgC,SAAD,EAAYC,YAAZ,IAA4B1C,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAM2C,UAAU,GAAIC,MAAD,IAAY;AAC3BF,IAAAA,YAAY,CAACE,MAAM,CAACC,UAAP,CAAkBC,KAAnB,CAAZ;AACA,wBAAO,QAAC,SAAD,OAAeF,MAAf;AAAuB,MAAA,UAAU,EAAC,iBAAlC;AAAoD,MAAA,KAAK,EAAC,MAA1D;AAAiE,MAAA,OAAO,EAAC;AAAzE;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAHD;;AAKA,iBAAeG,aAAf,GAA+B;AAC7BR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAS,IAAAA,KAAK,CAAC,uBAAuBP,SAAxB,EAAmC;AACtCQ,MAAAA,MAAM,EAAE,KAD8B;AAEtCC,MAAAA,IAAI,EAAE;AAFgC,KAAnC,CAAL,CAGGC,IAHH,CAGQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAgB5C,IAAI,IAAI;AACrC+C,MAAAA,OAAO,CAACC,GAAR,CAAYhD,IAAZ;AACD,KAFc,EAEZiD,KAFY,CAELC,KAAD,IAAW;AAClBH,MAAAA,OAAO,CAACG,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACAlB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KALc,CAHf;AAUAe,IAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAZ;;AACA,WAAOA,QAAQ,KAAK,IAApB,EAA0B;AAC1B,YAAM9B,KAAK,CAAC,IAAD,CAAX;AACAwC,MAAAA,KAAK,CAAC,uBAAuBP,SAAxB,EAAmC;AACtCQ,QAAAA,MAAM,EAAE,KAD8B;AAEtCC,QAAAA,IAAI,EAAE;AAFgC,OAAnC,CAAL,CAGGC,IAHH,CAGQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAgB5C,IAAI,IAAI;AACrC,YAAIA,IAAI,CAACA,IAAL,CAAUmD,IAAV,IAAkBC,SAAtB,EAAiC;AAC/BtB,UAAAA,OAAO,CAAC9B,IAAI,CAACA,IAAN,CAAP;AACAgC,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAe,UAAAA,OAAO,CAACC,GAAR,CAAYhD,IAAI,CAACA,IAAjB;AACD,SAJD,MAKK;AACH+C,UAAAA,OAAO,CAACC,GAAR,CAAYhD,IAAZ;AACD;AACF,OATc,EASZiD,KATY,CASLC,KAAD,IAAW;AAClBH,QAAAA,OAAO,CAACG,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACAlB,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAZc,CAHf;AAgBA;AACD;;AAED,sBACI;AAAM,IAAA,SAAS,EAAEC,OAAO,CAACtB,IAAzB;AAAA,4BACI,QAAC,YAAD;AACI,MAAA,EAAE,EAAC,gBADP;AAEI,MAAA,OAAO,EAAEX,IAFb;AAGI,MAAA,cAAc,EAAGqD,MAAD,IAAYA,MAAM,CAACC,KAHvC;AAII,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAJX;AAKI,MAAA,WAAW,EAAGlB,MAAD,IAAYD,UAAU,CAACC,MAAD;AALvC;AAAA;AAAA;AAAA;AAAA,YADJ,eAQI,QAAC,GAAD;AAAK,MAAA,SAAS,EAAEJ,OAAO,CAACuB,MAAxB;AAAgC,MAAA,EAAE,EAAE,CAApC;AAAA,6BACI,QAAC,eAAD;AAAiB,QAAA,QAAQ,EAAEtB,SAAS,KAAK,EAAzC;AAA6C,QAAA,OAAO,EAAE,MAAMM,aAAa,EAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CA3DD;;GAAMX,S;UACc3B,S;;;KADd2B,S;AA6DN,eAAeA,SAAf","sourcesContent":["import React, { useState } from 'react'\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Box from '@material-ui/core/Box'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport TextField from '@material-ui/core/TextField'\nimport data from '../assets/crypto_data'\nimport sleep from '../utils/sleep'\n\nconst useStyles = makeStyles((theme) => ({\n    logo: {\n      marginLeft: theme.spacing(15)\n    },\n    body: {\n      padding: theme.spacing(10),\n      paddingLeft: theme.spacing(75),\n      paddingRight: theme.spacing(75)\n    },\n    form: {\n      backgroundColor: 'white',\n      padding: theme.spacing(5),\n      borderRadius: 5,\n      boxShadow: '0px 0px 10px 3px rgba(0, 0, 0, .3)',\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }\n  }))\n\n  const BootstrapButton = withStyles({\n    root: {\n      color: 'white',\n      boxShadow: 'none',\n      textTransform: 'none',\n      fontSize: 14,\n      padding: '6px 200px',\n      border: '1px solid',\n      lineHeight: 1.5,\n      backgroundColor: '#1652F0',\n      borderColor: '#0063cc',\n      fontFamily: 'Red Hat Display',\n      '&:hover': {\n        backgroundColor: '#0069d9',\n        borderColor: '#0062cc',\n        boxShadow: 'none',\n      },\n      '&:active': {\n        boxShadow: 'none',\n        backgroundColor: '#0062cc',\n        borderColor: '#005cbf',\n      },\n      '&:focus': {\n        boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)',\n      },\n      '&:disabled': {\n        backgroundColor: '#bababa',\n        borderColor: '#bababa'\n      }\n    },\n  })(Button);\n\nconst InputForm = ({setData, res_data, setIsLoading}) => {\n    const classes = useStyles()\n    const [selection, setSelection] = useState('')\n\n    const selectCoin = (params) => {\n        setSelection(params.inputProps.value)\n        return <TextField {...params} fontFamily=\"Red Hat Display\" label=\"Coin\" variant=\"outlined\" />\n    }\n\n    async function getPrediction() {\n      setIsLoading(true)\n      fetch('/process?coinName=' + selection, {\n        method: \"GET\",\n        mode: \"cors\"\n      }).then(res => res.json().then(data => {\n        console.log(data)\n      }).catch((error) => {\n        console.error('Error:', error)\n        setIsLoading(false)\n      })\n      )\n      console.log(res_data)\n      while (res_data === null) {\n      await sleep(2000)\n      fetch('/predict?coinName=' + selection, {\n        method: \"GET\",\n        mode: \"cors\"\n      }).then(res => res.json().then(data => {\n        if (data.data.misc != undefined) {\n          setData(data.data)\n          setIsLoading(false)\n          console.log(data.data)\n        }\n        else {\n          console.log(data)\n        }\n      }).catch((error) => {\n        console.error('Error:', error)\n        setIsLoading(false)\n      })\n    )}\n    }\n\n    return (\n        <form className={classes.form}>\n            <Autocomplete\n                id=\"combo-box-demo\"\n                options={data}\n                getOptionLabel={(option) => option.title}\n                style={{ width: 300 }}\n                renderInput={(params) => selectCoin(params)}\n            />\n            <Box className={classes.submit} pt={2}>\n                <BootstrapButton disabled={selection === ''} onClick={() => getPrediction()}>\n                    Submit\n                </BootstrapButton>\n            </Box>\n        </form>\n    );\n}\n\nexport default InputForm"]},"metadata":{},"sourceType":"module"}