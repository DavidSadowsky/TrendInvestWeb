{"ast":null,"code":"import React from'react';import Box from'@material-ui/core/Box';import Container from'@material-ui/core/Container';import InputForm from'../Components/InputForm';import{makeStyles}from'@material-ui/core/styles';import TypeWriterEffect from'react-typewriter-effect';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var useStyles=makeStyles(function(theme){return{logo:{alignSelf:'start'},body:{display:'flex',flex:1,justifyContent:'center',alignItems:'center',flexDirection:'column'},card:{display:'flex',flex:1,justifyContent:'center',alignItems:'center',flexDirection:'column'},title:{color:'white',textAlign:'center'},animateWrapper:{display:'flex',flex:1,justifyContent:'center',alignItems:'center'}};});var Landing=function Landing(_ref){var setData=_ref.setData,setIsLoading=_ref.setIsLoading,isLoading=_ref.isLoading;var classes=useStyles();var myRef=document.querySelector('.scrollable-div');return/*#__PURE__*/_jsx(\"div\",{className:classes.body,children:isLoading?/*#__PURE__*/_jsx(TypeWriterEffect,{textStyle:{fontFamily:'Red Hat Display',color:'white',textAlign:'center'},startDelay:100,cursorColor:\"white\",multiText:[\"Generating a prediction...\",\"this usually takes around 15-30 seconds...\",\"however, since I'm collecting realtime data,\",\"it'll take longer if multiple users want predictions.\",\"Reddit & Twitter have strict scraping limitations.\",\"Hang tight. I'm still working.\"],typeSpeed:50,hideCursorAfterText:false,scrollArea:myRef,className:classes.title}):/*#__PURE__*/_jsxs(Container,{className:classes.body,children:[/*#__PURE__*/_jsx(TypeWriterEffect,{textStyle:{fontFamily:'Red Hat Display',color:'white',textAlign:'center'},startDelay:100,cursorColor:\"white\",text:\"Predict. Research. Invest.\",typeSpeed:100,hideCursorAfterText:true,scrollArea:myRef,className:classes.title}),/*#__PURE__*/_jsx(Box,{pt:10,className:classes.card,children:/*#__PURE__*/_jsx(InputForm,{className:classes.form,setData:setData,setIsLoading:setIsLoading})})]})});};export default Landing;","map":{"version":3,"sources":["/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/Screens/landing.js"],"names":["React","Box","Container","InputForm","makeStyles","TypeWriterEffect","useStyles","theme","logo","alignSelf","body","display","flex","justifyContent","alignItems","flexDirection","card","title","color","textAlign","animateWrapper","Landing","setData","setIsLoading","isLoading","classes","myRef","document","querySelector","fontFamily","form"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,GAAP,KAAgB,uBAAhB,CACA,MAAOC,CAAAA,SAAP,KAAsB,6BAAtB,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CACA,OAASC,UAAT,KAA2B,0BAA3B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,yBAA7B,C,wFAEA,GAAMC,CAAAA,SAAS,CAAGF,UAAU,CAAC,SAACG,KAAD,QAAY,CACrCC,IAAI,CAAE,CACJC,SAAS,CAAE,OADP,CAD+B,CAIrCC,IAAI,CAAE,CACJC,OAAO,CAAE,MADL,CAEJC,IAAI,CAAE,CAFF,CAGJC,cAAc,CAAE,QAHZ,CAIJC,UAAU,CAAE,QAJR,CAKJC,aAAa,CAAE,QALX,CAJ+B,CAWrCC,IAAI,CAAE,CACJL,OAAO,CAAE,MADL,CAEJC,IAAI,CAAE,CAFF,CAGJC,cAAc,CAAE,QAHZ,CAIJC,UAAU,CAAE,QAJR,CAKJC,aAAa,CAAE,QALX,CAX+B,CAkBrCE,KAAK,CAAE,CACLC,KAAK,CAAE,OADF,CAELC,SAAS,CAAE,QAFN,CAlB8B,CAsBrCC,cAAc,CAAE,CACdT,OAAO,CAAE,MADK,CAEdC,IAAI,CAAE,CAFQ,CAGdC,cAAc,CAAE,QAHF,CAIdC,UAAU,CAAE,QAJE,CAtBqB,CAAZ,EAAD,CAA5B,CA8BA,GAAMO,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,MAAwC,IAAtCC,CAAAA,OAAsC,MAAtCA,OAAsC,CAA7BC,YAA6B,MAA7BA,YAA6B,CAAfC,SAAe,MAAfA,SAAe,CACpD,GAAMC,CAAAA,OAAO,CAAGnB,SAAS,EAAzB,CACA,GAAMoB,CAAAA,KAAK,CAAGC,QAAQ,CAACC,aAAT,CAAuB,iBAAvB,CAAd,CACA,mBACE,YAAK,SAAS,CAAEH,OAAO,CAACf,IAAxB,UACIc,SAAS,cAAG,KAAC,gBAAD,EACN,SAAS,CAAE,CAAEK,UAAU,CAAE,iBAAd,CAAiCX,KAAK,CAAE,OAAxC,CAAiDC,SAAS,CAAE,QAA5D,CADL,CAEN,UAAU,CAAE,GAFN,CAGN,WAAW,CAAC,OAHN,CAIN,SAAS,CAAE,CAAC,4BAAD,CACX,4CADW,CAEX,8CAFW,CAGX,uDAHW,CAIX,oDAJW,CAKX,gCALW,CAJL,CAWN,SAAS,CAAE,EAXL,CAYN,mBAAmB,CAAE,KAZf,CAaN,UAAU,CAAEO,KAbN,CAcN,SAAS,CAAED,OAAO,CAACR,KAdb,EAAH,cAgBX,MAAC,SAAD,EAAW,SAAS,CAAEQ,OAAO,CAACf,IAA9B,wBACI,KAAC,gBAAD,EACI,SAAS,CAAE,CAAEmB,UAAU,CAAE,iBAAd,CAAiCX,KAAK,CAAE,OAAxC,CAAiDC,SAAS,CAAE,QAA5D,CADf,CAEI,UAAU,CAAE,GAFhB,CAGI,WAAW,CAAC,OAHhB,CAII,IAAI,CAAC,4BAJT,CAKI,SAAS,CAAE,GALf,CAMI,mBAAmB,CAAE,IANzB,CAOI,UAAU,CAAEO,KAPhB,CAQI,SAAS,CAAED,OAAO,CAACR,KARvB,EADJ,cAWQ,KAAC,GAAD,EAAK,EAAE,CAAE,EAAT,CAAa,SAAS,CAAEQ,OAAO,CAACT,IAAhC,uBACA,KAAC,SAAD,EAAW,SAAS,CAAES,OAAO,CAACK,IAA9B,CAAoC,OAAO,CAAER,OAA7C,CAAsD,YAAY,CAAEC,YAApE,EADA,EAXR,GAjBF,EADF,CAoCH,CAvCD,CAyCA,cAAeF,CAAAA,OAAf","sourcesContent":["import React from 'react'\nimport Box from '@material-ui/core/Box'\nimport Container from '@material-ui/core/Container'\nimport InputForm from '../Components/InputForm'\nimport { makeStyles } from '@material-ui/core/styles'\nimport TypeWriterEffect from 'react-typewriter-effect';\n\nconst useStyles = makeStyles((theme) => ({\n    logo: {\n      alignSelf: 'start'\n    },\n    body: {\n      display: 'flex',\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexDirection: 'column'\n    },\n    card: {\n      display: 'flex',\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      flexDirection: 'column'\n    },\n    title: {\n      color: 'white',\n      textAlign: 'center'\n    },\n    animateWrapper: {\n      display: 'flex',\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n    }\n  }))\n\nconst Landing = ({setData, setIsLoading, isLoading}) => {\n    const classes = useStyles()\n    const myRef = document.querySelector('.scrollable-div')\n    return (\n      <div className={classes.body}>\n        { isLoading ? <TypeWriterEffect\n                textStyle={{ fontFamily: 'Red Hat Display', color: 'white', textAlign: 'center' }}\n                startDelay={100}\n                cursorColor=\"white\"\n                multiText={[\"Generating a prediction...\",\n                \"this usually takes around 15-30 seconds...\",\n                \"however, since I'm collecting realtime data,\",\n                \"it'll take longer if multiple users want predictions.\",\n                \"Reddit & Twitter have strict scraping limitations.\",\n                \"Hang tight. I'm still working.\"\n                ]}\n                typeSpeed={50}\n                hideCursorAfterText={false}\n                scrollArea={myRef}\n                className={classes.title}\n                /> :\n        <Container className={classes.body}>\n            <TypeWriterEffect\n                textStyle={{ fontFamily: 'Red Hat Display', color: 'white', textAlign: 'center' }}\n                startDelay={100}\n                cursorColor=\"white\"\n                text=\"Predict. Research. Invest.\"\n                typeSpeed={100}\n                hideCursorAfterText={true}\n                scrollArea={myRef}\n                className={classes.title}\n                />\n                <Box pt={10} className={classes.card}>\n                <InputForm className={classes.form} setData={setData} setIsLoading={setIsLoading} />\n                </Box>\n            </Container>\n        }\n        </div>\n    )\n}\n\nexport default Landing"]},"metadata":{},"sourceType":"module"}