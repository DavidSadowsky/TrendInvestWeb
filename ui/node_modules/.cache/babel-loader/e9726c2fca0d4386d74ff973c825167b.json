{"ast":null,"code":"var _jsxFileName = \"/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/Components/InputForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { AnimateOnChange } from 'react-animation';\nimport ReactCSSTransitionGroup from 'react-transition-group';\nimport data from '../assets/crypto_data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  logo: {\n    marginLeft: theme.spacing(15)\n  },\n  body: {\n    padding: theme.spacing(10),\n    paddingLeft: theme.spacing(75),\n    paddingRight: theme.spacing(75)\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: theme.spacing(5),\n    borderRadius: 5,\n    boxShadow: '0px 0px 10px 3px rgba(0, 0, 0, .3)',\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  submit: {}\n}));\nconst BootstrapButton = withStyles({\n  root: {\n    color: 'white',\n    boxShadow: 'none',\n    textTransform: 'none',\n    fontSize: 14,\n    padding: '6px 200px',\n    border: '1px solid',\n    lineHeight: 1.5,\n    backgroundColor: '#1652F0',\n    borderColor: '#0063cc',\n    fontFamily: 'Red Hat Display',\n    '&:hover': {\n      backgroundColor: '#0069d9',\n      borderColor: '#0062cc',\n      boxShadow: 'none'\n    },\n    '&:active': {\n      boxShadow: 'none',\n      backgroundColor: '#0062cc',\n      borderColor: '#005cbf'\n    },\n    '&:focus': {\n      boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)'\n    }\n  }\n})(Button);\n\nfunction csvJSON(csv) {\n  var lines = csv.split(\"\\n\");\n  var result = [];\n  var headers = lines[0].split(\",\");\n\n  for (var i = 1; i < lines.length; i++) {\n    var obj = {};\n    var currentline = lines[i].split(\",\");\n\n    for (var j = 0; j < headers.length; j++) {\n      obj[headers[j]] = currentline[j];\n    }\n\n    result.push(obj);\n  }\n\n  console.log(JSON.parse(result));\n  return JSON.parse(result);\n}\n\nconst InputForm = () => {\n  _s();\n\n  const classes = useStyles();\n  const [selection, setSelection] = useState('');\n  const [prediction, setPrediction] = useState(null);\n\n  const selectCoin = params => {\n    setSelection(params.inputProps.value);\n    return /*#__PURE__*/_jsxDEV(TextField, { ...params,\n      fontFamily: \"Red Hat Display\",\n      label: \"Coin\",\n      variant: \"outlined\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 16\n    }, this);\n  };\n\n  const getPrediction = () => {\n    console.log('/predict?coinName=' + selection);\n    fetch('/predict?coinName=' + selection, {\n      method: \"GET\"\n    }).then(res => res.json().then(data => {\n      console.log(data.data.prediction);\n      setPrediction(data.data.prediction);\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(Autocomplete, {\n        id: \"combo-box-demo\",\n        options: data,\n        getOptionLabel: option => option.title,\n        style: {\n          width: 300\n        },\n        renderInput: params => selectCoin(params)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.submit,\n        pt: 2,\n        children: /*#__PURE__*/_jsxDEV(BootstrapButton, {\n          onClick: () => getPrediction(),\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 7\n  }, this);\n};\n\n_s(InputForm, \"SpnRDhvXi9z6jGF8TnWWxSHdJAU=\", false, function () {\n  return [useStyles];\n});\n\n_c = InputForm;\nexport default InputForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"sources":["/Users/davidsadowsky/Development/TrendInvestWeb/ui/src/Components/InputForm.js"],"names":["React","useEffect","useState","makeStyles","withStyles","Button","Box","Autocomplete","TextField","AnimateOnChange","ReactCSSTransitionGroup","data","useStyles","theme","logo","marginLeft","spacing","body","padding","paddingLeft","paddingRight","form","backgroundColor","borderRadius","boxShadow","display","flex","flexDirection","justifyContent","alignItems","submit","BootstrapButton","root","color","textTransform","fontSize","border","lineHeight","borderColor","fontFamily","csvJSON","csv","lines","split","result","headers","i","length","obj","currentline","j","push","console","log","JSON","parse","InputForm","classes","selection","setSelection","prediction","setPrediction","selectCoin","params","inputProps","value","getPrediction","fetch","method","then","res","json","option","title","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { makeStyles, withStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport Box from '@material-ui/core/Box'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport TextField from '@material-ui/core/TextField'\nimport { AnimateOnChange } from 'react-animation'\nimport ReactCSSTransitionGroup from 'react-transition-group';\nimport data from '../assets/crypto_data'\n\nconst useStyles = makeStyles((theme) => ({\n    logo: {\n      marginLeft: theme.spacing(15)\n    },\n    body: {\n      padding: theme.spacing(10),\n      paddingLeft: theme.spacing(75),\n      paddingRight: theme.spacing(75)\n    },\n    form: {\n      backgroundColor: 'white',\n      padding: theme.spacing(5),\n      borderRadius: 5,\n      boxShadow: '0px 0px 10px 3px rgba(0, 0, 0, .3)',\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    submit: {\n\n    }\n  }))\n\n  const BootstrapButton = withStyles({\n    root: {\n      color: 'white',\n      boxShadow: 'none',\n      textTransform: 'none',\n      fontSize: 14,\n      padding: '6px 200px',\n      border: '1px solid',\n      lineHeight: 1.5,\n      backgroundColor: '#1652F0',\n      borderColor: '#0063cc',\n      fontFamily: 'Red Hat Display',\n      '&:hover': {\n        backgroundColor: '#0069d9',\n        borderColor: '#0062cc',\n        boxShadow: 'none',\n      },\n      '&:active': {\n        boxShadow: 'none',\n        backgroundColor: '#0062cc',\n        borderColor: '#005cbf',\n      },\n      '&:focus': {\n        boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)',\n      },\n    },\n  })(Button);\n\n  function csvJSON(csv){\n    var lines=csv.split(\"\\n\");\n    var result = [];\n    var headers=lines[0].split(\",\")\n\n    for(var i=1;i<lines.length;i++) {\n        var obj = {};\n        var currentline=lines[i].split(\",\");\n        for(var j=0;j<headers.length;j++){\n            obj[headers[j]] = currentline[j]\n        }\n        result.push(obj)\n    }\n    console.log(JSON.parse(result))\n    return JSON.parse(result)\n}\n\n\n\nconst InputForm = () => {\n    const classes = useStyles()\n    const [selection, setSelection] = useState('')\n    const [prediction, setPrediction] = useState(null)\n\n    const selectCoin = (params) => {\n        setSelection(params.inputProps.value)\n        return <TextField {...params} fontFamily=\"Red Hat Display\" label=\"Coin\" variant=\"outlined\" />\n    }\n\n    const getPrediction = () => {\n      console.log('/predict?coinName=' + selection)\n      fetch('/predict?coinName=' + selection, {\n        method: \"GET\"\n      }).then(res => res.json().then(data => {\n        console.log(data.data.prediction)\n        setPrediction(data.data.prediction)\n      })\n    )}\n\n    return (\n      <div>\n        <form className={classes.form}>\n            <Autocomplete\n                id=\"combo-box-demo\"\n                options={data}\n                getOptionLabel={(option) => option.title}\n                style={{ width: 300 }}\n                renderInput={(params) => selectCoin(params)}\n            />\n            <Box className={classes.submit} pt={2}>\n                <BootstrapButton onClick={() => getPrediction()}>\n                    SUBMIT\n                </BootstrapButton>\n            </Box>\n        </form>\n        </div>\n    );\n}\n\nexport default InputForm"]},"metadata":{},"sourceType":"module"}